
// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

//contract only allows the creator to create new coins
//anyone can send coins to each other without a need for registering with a username and password

contract Coin{
    //public, so can access from other contract
    address public minter;//variable for minter
    mapping (address=>uint256) public balances; //variable for balances

    event Sent(address from,address to,uint amount);

    //constructor only runs when contract is deployed
    constructor() {
        minter=msg.sender;
    }

    //make new coins and send to other address
    //only owner can send coins
    function mint(address receiver,uint amount) public {
        require(msg.sender==minter);
        balances[receiver]+=amount;
    }

    error insufficientBalance(uint requested, uint available);  //error msg for insufficient Balance

    //send any amount of coins to an existing address
    function send(address receiver, uint amount) public {
        if(amount>balances[msg.sender])    //required amount should be greater than x=true and then run this
        revert insufficientBalance({
            requested: amount,
            available: balances[msg.sender]
        });
        balances[msg.sender]-=amount;
        balances[receiver]+=amount;
        emit Sent(msg.sender, receiver, amount);
    }
}
