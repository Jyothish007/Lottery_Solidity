// The code works as follows
// A man can allocate the amount that he wants to give to family members or friends after he is deceased when the hasDeceased function is called the amount will be credited to the respective accounts.

// SPDX-License-Identifier: MIT
pragma solidity ^0.5.7;

contract will{
    address owner;
    uint    fortune;
    bool    deceased;
    uint    i;
    
    constructor() payable public {
        owner = msg.sender;     //address that is being called
        fortune = msg.value;    //how much eather is sent
        deceased = false;
    }

    //create modifier so the only person who can call is the owner
    modifier onlyOwner{
        require(msg.sender == owner);
        _;      //"_" says the function to shift to the actual function after running the modifier so the code only works if the condition is true
    }

    //create a modifier so that we only allocate funds if friend's grandparents are deceased
    modifier mustBeDeceased{
        require(deceased == true);
        _;
    }

    //"[]" is an array that contains the wallet address of family members
    address payable [] familyWallets;
    
    //map through inheritance 
    mapping (address => uint) inheritance;

    //set inheritance to each address
    function setInheritance(address payable wallet, uint amount) public {
        familyWallets.push(wallet);        //adds wallet address to the family wallet

        inheritence[wallet] = amount;
    }

    //pay each family member based on their wallet address
    function payout() private mustBeDeceased{
        for (i=0; i<familyWallets.length ; i++){
            familyWallets[i].transfer(inheritance[familyWallets[i]]);   //transferring the funds from the contract address to receivers address

        }
    }

    //oracle switch simulation
    function hasDeceased() public onlyOwner{
        deceased = true;
        payout();
    }
}
